#region name for the regional summary text.
region_name2 <- function (la) {
d <- filter(la_ud, la_name == la)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='ALL', cohort_19_in==latest_year) %>%
dplyr::select(region))
}
#region rates for the regional summary text
reg_l2_rate2 <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='ALL', la_name=='ALL') %>%
dplyr::select(l2_by19_rate))
}
reg_l2_rate2_sen_with <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN with statements or EHC plans', la_name=='ALL') %>%
dplyr::select(l2_by19_rate))
}
reg_l2_rate2_sen_without <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN without statements or EHC plans', la_name=='ALL') %>%
dplyr::select(l2_by19_rate))
}
reg_l2_rate2_nosen <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='No SEN', la_name=='ALL') %>%
dplyr::select(l2_by19_rate))
}
reg_l2em_rate2 <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='ALL', la_name=='ALL') %>%
dplyr::select(l2_with_em_by19_rate))
}
reg_l2em_rate2_sen_with <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN with statements or EHC plans', la_name=='ALL') %>%
dplyr::select(l2_with_em_by19_rate))
}
reg_l2em_rate2_sen_without <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN without statements or EHC plans', la_name=='ALL') %>%
dplyr::select(l2_with_em_by19_rate))
}
reg_l2em_rate2_nosen <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='No SEN', la_name=='ALL') %>%
dplyr::select(l2_with_em_by19_rate))
}
reg_l3_rate2 <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='ALL', la_name=='ALL') %>%
dplyr::select(l3_by19_rate))
}
reg_l3_rate2_sen_with <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN with statements or EHC plans', la_name=='ALL') %>%
dplyr::select(l3_by19_rate))
}
reg_l3_rate2_sen_without <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN without statements or EHC plans', la_name=='ALL') %>%
dplyr::select(l3_by19_rate))
}
reg_l3_rate2_nosen <- function(la, refyear) {
reg<- as.character(region_name2(la))
d <- dplyr::filter(la_ud, cohort_19_in == refyear, region == reg)
return(dplyr::filter(d, gender == 'ALL', fsm=='ALL', sen=='No SEN', la_name=='ALL') %>%
dplyr::select(l3_by19_rate))
}
#National rates for the national summary - SEN
nat_l2_rate2 <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear, la_name=='ALL', region=='ALL')
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='ALL') %>%
dplyr::select(l2_by19_rate))
}
nat_l2_rate2_sen_with <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN with statements or EHC plans', la_name=='ALL', region=='ALL') %>%
dplyr::select(l2_by19_rate))
}
nat_l2_rate2_sen_without <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN without statements or EHC plans', la_name=='ALL', region=='ALL') %>%
dplyr::select(l2_by19_rate))
}
nat_l2_rate2_nosen <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='No SEN', la_name=='ALL', region=='ALL') %>%
dplyr::select(l2_by19_rate))
}
nat_l2em_rate2 <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='ALL',la_name=='ALL', region=='ALL') %>%
dplyr::select(l2_with_em_by19_rate))
}
nat_l2em_rate2_sen_with <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN with statements or EHC plans',la_name=='ALL', region=='ALL') %>%
dplyr::select(l2_with_em_by19_rate))
}
nat_l2em_rate2_sen_without <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN without statements or EHC plans',la_name=='ALL', region=='ALL') %>%
dplyr::select(l2_with_em_by19_rate))
}
nat_l2em_rate2_nosen <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='No SEN', la_name=='ALL', region=='ALL') %>%
dplyr::select(l2_with_em_by19_rate))
}
nat_l3_rate2 <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='ALL', la_name=='ALL', region=='ALL') %>%
dplyr::select(l3_by19_rate))
}
nat_l3_rate2_sen_with <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN with statements or EHC plans', la_name=='ALL', region=='ALL') %>%
dplyr::select(l3_by19_rate))
}
nat_l3_rate2_sen_without <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='SEN without statements or EHC plans', la_name=='ALL', region=='ALL') %>%
dplyr::select(l3_by19_rate))
}
nat_l3_rate2_nosen <- function(refyear) {
d <- filter(la_ud, cohort_19_in == refyear)
return(filter(d, gender == 'ALL', fsm=='ALL', sen=='No SEN', la_name=='ALL', region=='ALL') %>%
dplyr::select(l3_by19_rate))
}
####7. Download LA tables
##FSM
fsm_la_table <- function(la) {
d <- filter(la_ud, la_name == la, gender=='ALL', sen=='ALL', cohort_19_in<=latest_year) %>%
select(
cohort_19_in,
number_in_ss_cohort,
region,
la_name,
fsm,
l2_by19,
l2_with_em_by19,
l3_by19,
l2_by19_rate,
l2_with_em_by19_rate,
l3_by19_rate
)
return(d)
}
##SEN
sen_la_table <- function(la) {
d <- filter(la_ud, la_name == la, gender=='ALL', fsm=='ALL', cohort_19_in!=first_year, cohort_19_in<=latest_year) %>%
select(
cohort_19_in,
number_in_ss_cohort,
region,
la_name,
sen,
l2_by19,
l2_with_em_by19,
l3_by19,
l2_by19_rate,
l2_with_em_by19_rate,
l3_by19_rate
)
return(d)
}
####
# 8. MAP ----
ukLocalAuthoritises <- shapefile("data/England_LA_2016.shp")
underlying_data <- filter(la_ud, gender=='ALL', fsm=='ALL', sen=='ALL', cohort_19_in ==latest_year) %>%
select(la_code_3,l2_by19_rate, l2_with_em_by19_rate, l3_by19_rate, l2_em_by19_belowat16_rate)
underlying_data$l2_by19_rate <- round(as.numeric(underlying_data$l2_by19_rate),1)
underlying_data$l2_with_em_by19_rate <- round(as.numeric(underlying_data$l2_with_em_by19_rate),1)
underlying_data$l3_by19_rate <- round(as.numeric(underlying_data$l3_by19_rate),1)
underlying_data$l2_em_by19_belowat16_rate <- round(as.numeric(underlying_data$l2_em_by19_belowat16_rate),1)
ukLocalAuthoritises <- spTransform(ukLocalAuthoritises, CRS("+proj=longlat +ellps=GRS80"))
englishLocalAuthorities = subset(ukLocalAuthoritises, LA15CD %like% "E") # Code begins with E
englishLocalAuthorityData <- sp::merge(englishLocalAuthorities,
underlying_data,
by.x = 'LA_Code',
by.y = 'la_code_3',
all.y = TRUE,
duplicateGeoms = TRUE)
#level 2
# Create bins for colour plotting
l2_rate_Pal <- colorQuantile('YlOrRd', englishLocalAuthorityData$l2_by19_rate, n = 5, reverse = TRUE)
#colorQuantile defaults to 0-20%, 20-40%, 40-60%, 60-80%, 80-100% as the labels on the legend
#whereas colorNumeric gives a scale
#colorBin splits into a defined number of bins
# Add a label for tooltip (bit of html)
l2_rate_Labels <- sprintf("<strong>%s</strong><br/>Level 2 by 19 rate <strong>%g</strong> <sup></sup>",
englishLocalAuthorityData$LA15NM, englishLocalAuthorityData$l2_by19_rate) %>%
lapply(htmltools::HTML)
#level 2 EM
# Create bins for colour plotting
l2EM_rate_Pal = colorQuantile('YlOrRd', englishLocalAuthorityData$l2_with_em_by19_rate, n = 5,reverse = TRUE)
# Add a label for tooltip (bit of html)
l2EM_rate_Labels <- sprintf("<strong>%s</strong><br/>Level 2 with English and maths by 19 rate <strong>%g</strong> <sup></sup>",
englishLocalAuthorityData$LA15NM, englishLocalAuthorityData$l2_with_em_by19_rate) %>%
lapply(htmltools::HTML)
#level 3
# Create bins for colour plotting
l3_rate_Pal = colorQuantile('YlOrRd', englishLocalAuthorityData$l3_by19_rate, n = 5, reverse = TRUE)
# Add a label for tooltip (more html...)
l3_rate_Labels <- sprintf("<strong>%s</strong><br/>Level 3 by 19 rate <strong>%g</strong> <sup></sup>",
englishLocalAuthorityData$LA15NM, englishLocalAuthorityData$l3_by19_rate) %>%
lapply(htmltools::HTML)
#level 2 EM by 19, below at 16
# Create bins for colour plotting
l2em19bl16_rate_Pal = colorQuantile('YlOrRd', englishLocalAuthorityData$l2_em_by19_belowat16_rate, n = 5, reverse = TRUE)
# Add a label for tooltip (more html...)
l2em19bl16_rate_Labels <- sprintf("<strong>%s</strong><br/>Level 2 English and maths by 19, of those below at 16 rate <strong>%g</strong> <sup></sup>",
englishLocalAuthorityData$LA15NM, englishLocalAuthorityData$l2_em_by19_belowat16_rate) %>%
lapply(htmltools::HTML)
excmap <- function(measure) {
if(measure == 'l2') {
return(
leaflet(englishLocalAuthorityData) %>%
addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(minZoom = 6, maxZoom = 10)) %>%
addPolygons(fillColor = ~l2_rate_Pal(englishLocalAuthorityData$l2_by19_rate),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = l2_rate_Labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(colors = c("#BD0026","#F03B20","#FD8D3C","#FECC5C","#FFFFB2"),
opacity = 0.7,
title = NULL,
position = "topright",
labels= c("Lowest attainment rates", "","","","Highest attainment rates"))
)
}
if(measure == 'l2EM') {
return(
leaflet(englishLocalAuthorityData) %>%
addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(minZoom = 6, maxZoom = 10)) %>%
addPolygons(fillColor = ~l2EM_rate_Pal(englishLocalAuthorityData$l2_with_em_by19_rate),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = l2EM_rate_Labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(colors = c("#BD0026","#F03B20","#FD8D3C","#FECC5C","#FFFFB2"),
opacity = 0.7,
title = NULL,
position = "topright",
labels= c("Lowest attainment rates", "","","","Highest attainment rates"))
)
}
if(measure == 'l3') {
return(
leaflet(englishLocalAuthorityData) %>%
addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(minZoom = 6, maxZoom = 10)) %>%
addPolygons(fillColor = ~l3_rate_Pal(englishLocalAuthorityData$l3_by19_rate),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = l3_rate_Labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(colors = c("#BD0026","#F03B20","#FD8D3C","#FECC5C","#FFFFB2"),
opacity = 0.7,
title = NULL,
position = "topright",
labels= c("Lowest attainment rates", "","","","Highest attainment rates"))
)
}
if(measure == 'l2em19bl16') {
return(
leaflet(englishLocalAuthorityData) %>%
addProviderTiles(providers$CartoDB.Positron,
options = providerTileOptions(minZoom = 6, maxZoom = 10)) %>%
addPolygons(fillColor = ~l2em19bl16_rate_Pal(englishLocalAuthorityData$l2_em_by19_belowat16_rate),
weight = 2,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE),
label = l2em19bl16_rate_Labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")) %>%
addLegend(colors = c("#BD0026","#F03B20","#FD8D3C","#FECC5C","#FFFFB2"),
opacity = 0.7,
title = NULL,
position = "topright",
labels= c("Lowest attainment rates", "","","","Highest attainment rates"))
)
}
}
####
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages('styler')
renv::snapshot()
shiny::runApp()
renv::init()
runApp()
library(leaflet)
library(geojsonio)
library(rgdal)
library(sp)
library(data.table)
library(RColorBrewer)
library(raster)
library(pander)
library(tidyverse)
library(shinycssloaders)
library(plotly)
library(DT)
library(ggalt)
library(magrittr)
library(readr)
library(dplyr)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(styler)
library(styler)
runApp()
runApp()
library(styler)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
view(la_ud)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
View(la_plot_data_sen)
runApp()
shiny::runApp()
View(la_plot_data_sen)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
