install.packages('styler')
renv::snapshot()
shiny::runApp()
renv::init()
runApp()
library(leaflet)
library(geojsonio)
library(rgdal)
library(sp)
library(data.table)
library(RColorBrewer)
library(raster)
library(pander)
library(tidyverse)
library(shinycssloaders)
library(plotly)
library(DT)
library(ggalt)
library(magrittr)
library(readr)
library(dplyr)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(styler)
library(styler)
runApp()
runApp()
library(styler)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
view(la_ud)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
View(la_plot_data_sen)
runApp()
shiny::runApp()
View(la_plot_data_sen)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
tabPanel(
value = "LA-FSM",
"LA & FSM",
# Define UI for application that draws a histogram
# Sidebar with a slider input for number of bins
gov_main_layout(
gov_row(
column(
width=12,
h1("Level 2 and 3 attainment by local authority and Free School Meal (FSM) status"),
),
#new
column(
width=12,
h5(strong(textOutput("la_title"))),
textOutput("la_sum_fsm"),
br(),
#h5(strong(textOutput("region_title"))),
textOutput("reg_sum_fsm"),
br(),
#h5(strong("National summary")),
textOutput("nat_sum_fsm"),
hr()
),
column(
width=12,
div(
class = "well",
style = "min-height: 100%; height: 100%; overflow-y: visible",
fluidRow(
column(
width=6,
selectizeInput( "select_cat",
label = "Choose a measure",
choices = list(
"Level 2" = 'l2', "Level 2 with English and maths" = 'l2em',
"Level 3" = 'l3')
)),
column(
width=6,
selectizeInput("select2",
label = "Choose an area",
choices = sort(unique(la_plot_data_fsm$la_name))
)
))
)
),
column(
width=12,
tabsetPanel(id = "tabsetpanels",
tabPanel(
"Chart",
fluidRow(
column(
width=12,
h2("Attainment by Local authority and FSM by age 19"),
br(),
column(5,
radioButtons("plot_type", "Which measure?", c("percentage", "number"), inline = TRUE)
)),
plotlyOutput("t1_chart"#, width = '23cm'
),
br(),
#column(width=12,
#tableOutput("t1_table"),
br()
)
#valueBoxOutput("boxavgRevBal", width = 6),
#valueBoxOutput("boxpcRevBal", width = 6),
# box(
#   width=12,
# plotlyOutput("lineRevBal")))
),
tabPanel("Data download",
br(),
downloadButton("downloadFSM", "Download"),
br(),
DT::dataTableOutput("fsm_la_data")
)))),
hr(),
HTML('<div><b>If you would like to provide feedback on this tool please contact Post16.STATISTICS@education.gov.uk</b></div>
<br>
</br>')))}
runApp()
tabPanel(
value = "LA-FSM",
"LA & FSM",
# Define UI for application that draws a histogram
# Sidebar with a slider input for number of bins
gov_main_layout(
gov_row(
column(
width=12,
h1("Level 2 and 3 attainment by local authority and Free School Meal (FSM) status"),
),
#new
column(
width=12,
h5(strong(textOutput("la_title"))),
textOutput("la_sum_fsm"),
br(),
#h5(strong(textOutput("region_title"))),
textOutput("reg_sum_fsm"),
br(),
#h5(strong("National summary")),
textOutput("nat_sum_fsm"),
hr()
),
column(
width=12,
div(
class = "well",
style = "min-height: 100%; height: 100%; overflow-y: visible",
fluidRow(
column(
width=6,
selectizeInput( "select_cat",
label = "Choose a measure",
choices = list(
"Level 2" = 'l2', "Level 2 with English and maths" = 'l2em',
"Level 3" = 'l3')
)),
column(
width=6,
selectizeInput("select2",
label = "Choose an area",
choices = sort(unique(la_plot_data_fsm$la_name))
)
))
)
),
column(
width=12,
tabsetPanel(id = "tabsetpanels",
tabPanel(
"Chart",
fluidRow(
column(
width=12,
h2("Attainment by Local authority and FSM by age 19"),
br(),
column(5,
radioButtons("plot_type", "Which measure?", c("percentage", "number"), inline = TRUE)
)),
plotOutput("t1_chart"#, width = '23cm'
),
br(),
#column(width=12,
#tableOutput("t1_table"),
br()
)
valueBoxOutput("box", width = 6),
#valueBoxOutput("boxpcRevBal", width = 6),
# box(
#   width=12,
# plotlyOutput("lineRevBal")))
),
tabPanel("Data download",
br(),
downloadButton("downloadFSM", "Download"),
br(),
DT::dataTableOutput("fsm_la_data")
)))),
hr(),
HTML('<div><b>If you would like to provide feedback on this tool please contact Post16.STATISTICS@education.gov.uk</b></div>
<br>
</br>')))}
runApp()
runApp()
shiny::runApp()
shiny::runApp()
view(national_bars_rate())
view(la_ud)
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
tabPanel(
value = "LA-FSM",
"LA & FSM",
# Define UI for application that draws a histogram
# Sidebar with a slider input for number of bins
gov_main_layout(
gov_row(
column(
width=12,
h1("Level 2 and 3 attainment by local authority and Free School Meal (FSM) status"),
),
#new
column(
width=12,
h5(strong(textOutput("la_title"))),
textOutput("la_sum_fsm"),
br(),
#h5(strong(textOutput("region_title"))),
textOutput("reg_sum_fsm"),
br(),
#h5(strong("National summary")),
textOutput("nat_sum_fsm"),
hr()
),
column(
width=12,
div(
class = "well",
style = "min-height: 100%; height: 100%; overflow-y: visible",
fluidRow(
column(
width=6,
selectizeInput( "select_cat",
label = "Choose a measure",
choices = list(
"Level 2" = 'l2', "Level 2 with English and maths" = 'l2em',
"Level 3" = 'l3')
)),
column(
width=6,
selectizeInput("select2",
label = "Choose an area",
choices = sort(unique(la_plot_data_fsm$la_name))
)
))
)
),
column(
width=12,
tabsetPanel(id = "tabsetpanels",
tabPanel(
"Chart",
gov_row(
#column(
#width=12,
h2("Attainment by Local authority and FSM by age 19"),
#valueBoxOutput("box", width = 6),
br(),
#column(5,
radioButtons("plot_type", "Which measure?", c("percentage", "number"), inline = TRUE)
#),
plotlyOutput("t1_chart"#, width = '23cm'
),
br(),
#column(width=12,
#tableOutput("t1_table"),
br()
)
#valueBoxOutput("boxpcRevBal", width = 6),
# box(
#   width=12,
# plotlyOutput("lineRevBal")))
),
tabPanel("Data download",
br(),
downloadButton("downloadFSM", "Download"),
br(),
DT::dataTableOutput("fsm_la_data")
)))),
hr(),
HTML('<div><b>If you would like to provide feedback on this tool please contact Post16.STATISTICS@education.gov.uk</b></div>
<br>
</br>')))}
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
view(la_plot_data_fsm)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
la_ud_VB$value <- round(la_ud_VB$value, digits = 1)
la_ud_VB$value <- round(la_ud_VB$value, digits = 1)
la_ud_VB$value <- round((as.numeric(la_ud_VB$value)), digits = 1)
#4. Overview tab
view(la_ud_VB)
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
